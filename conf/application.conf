# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="%APPLICATION_SECRET%"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

### Settings for Akka Cluster
play.application.loader = "AppLoader"

play.akka.actor-system = "ClusterSystem"

akka {
  loglevel = INFO
  stdout-loglevel = INFO
  loggers = ["akka.event.Logging$DefaultLogger"]

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    // Dont do this in production, consider protobuf
    allow-java-serialization = on
  }

  remote {
    log-remote-lifecycle-events = off
    artery {
      canonical {
        hostname = "127.0.0.1" 
        hostname = ${?akka.host}
        port = 2551
        port = ${?akka.port}
      }
    }
  }

  cluster {
    auto-discovery = off
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    seed-nodes = ["akka://ClusterSystem@127.0.0.1:2551"]
    roles = ["write-model", "read-model"]
  }

  persistence {
    journal {
      plugin = "jdbc-journal"
      // Enable the line below to automatically start the journal when the actorsystem is started
      // auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      // Enable the line below to automatically start the snapshot-store when the actorsystem is started
      // auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }
}


event-processor {
  tag-prefix = "carts-slice"       // even processor tag prefix
  parallelism = 4                  // number of event processors
}

akka-persistence-jdbc {
  shared-databases {
    slick {
      profile = "slick.jdbc.PostgresProfile$"
      db {
        host = "localhost"
        url = "jdbc:postgresql://"${akka-persistence-jdbc.shared-databases.slick.db.host}":5555/deko?reWriteBatchedInserts=true"
        user = "deko"
        password = "deko"
        driver = "org.postgresql.Driver"
        port = 5555
        numThreads = 5
        maxConnections = 5
        minConnections = 1
      }
    }
  }
}


jdbc-journal {
  use-shared-db = "slick"
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  use-shared-db = "slick"
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  use-shared-db = "slick"
}